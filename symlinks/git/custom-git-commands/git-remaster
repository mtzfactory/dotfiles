#!/bin/bash
 
## git-remaster
# Pulls latest remote HEAD to your master and rebases current branch on top of it, preserving staged and unstaged changes.
#

set -e
 
if git show-ref --quiet --verify refs/heads/master; then MASTER=master; fi
if git show-ref --quiet --verify refs/heads/trunk; then MASTER=trunk; fi
if [ -z $MASTER ]; then echo "No master/trunk branch found."; exit 1; fi
 
BRANCH=$(git rev-parse --abbrev-ref HEAD)
 
# save current state to a detached commit object and reset
RSTASH=$(git stash create --include-untracked)

if [[ $RSTASH ]]; then
    echo "Stashed $RSTASH"
    git stash store -m "Remaster on branch $BRANCH $(date)" "$RSTASH"
	git reset --hard
fi
    
# fetch updates
if git fetch --prune --no-tags origin $MASTER; then   
    # if not on master branch, check it out, update and return to branch
    if [[ $BRANCH != $MASTER ]]; then
        git checkout $MASTER
        git rebase origin/$MASTER --preserve-merges
        git checkout -
    fi
    # rebase changes on top of origin/master
    git rebase origin/$MASTER --preserve-merges
fi
 
# bring back stash if available, hide errors when empty
if test $RSTASH; then
    git stash apply $RSTASH
fi
