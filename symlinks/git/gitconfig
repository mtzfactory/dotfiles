[includeIf "gitdir:~/development/trainline/"]
  path = ~/.gitconfig-work

[includeIf "gitdir:~/development/personal/"]
  path = ~/.gitconfig-personal

[credential]
  helper = osxkeychain

[core]
  excludesfile = ~/.gitignore-global
  pager = delta

[diff]
  colorMoved = zebra

[fetch]
  prune = true

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[init]
  defaultBranch = main

[interactive]
  diffFilter = delta --color-only

[delta]
  dark = true
  features = line-numbers decorations
  hyperlinks = true
  navigate = true
  syntax-theme = Dracula
  plus-style = syntax "#003800"
  minus-style = syntax "#3f0001"

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none
  hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
  line-numbers-left-style = cyan
  line-numbers-right-style = cyan
  line-numbers-minus-style = 124
  line-numbers-plus-style = 28

[merge]
  conflictstyle = diff3

[pull]
  ff = only
  rebase = true

[commit]
	gpgsign = true

[user]
  # gpg --list-secret-keys --keyid-format=long
	signingkey = 8CA1D252563BB6DF

[alias]
  # Clone repo using worktree
  # Example: git c4wt git@your-repo.git
  c4wt = clone-for-worktrees
  wt = worktree
  
  # Get git directory path
  path = rev-parse --git-dir
  
  # Get git hooks path
  path-hooks = rev-parse --git-path hooks
  
  # Apply changes from branch without creating a new commit
  apply-changes-from-branch = merge --no-ff --no-commit
  acfb = apply-changes-from-branch

  # List commits from current branch
  branch-commits = !git log --oneline --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' $(git branch-head)..$(git branch-current)

  # Get current branch
  branch-current = rev-parse --abbrev-ref HEAD

  # Get branch files
  branch-files = !git diff --name-only $(git branch-head)

  # Get head branch
  branch-head = !git remote show origin | grep \"HEAD branch\" | cut -d\" \" -f5

  # List stale branches
  branch-stale = "!f() { git branch --sort=-committerdate | while read branch; do if [[ -z "$(git log -1 --since='90 days ago' -s $branch)" ]]; then echo $branch; fi; done; }; f"

  # Clean up local branches that have been merged into the current branch
  branch-cleanup = "!f() { git branch --merged | grep -v '\\*' | grep -v $(git branch-head) | xargs -n 1 git branch -d; }; f"
  bc = branch-cleanup

  # Conflicts
  conflicts = diff --name-only --diff-filter=U

  # Current commit hash
  commit-hash = "!f() { if [ ! -z "$1" ]; then ID="~$1"; fi; git rev-parse --short HEAD$ID; }; f"

  # Get commit history with style.
  # Example: git commit-history v1.1.0 v1.0.0
  commit-history = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

  # Last commit
  commit-last = log -1 HEAD

  # Undo last commit
  commit-undo = reset --mixed HEAD

  # Delete all branches on remote `origin` that have been merged into `origin/master`
  # link https://salferrarello.com/git-delete-merged-branches-from-remote/
  delete-merged-on-origin = !git branch --all --merged remotes/origin/$(git branch-head)  | grep --invert-match $(git branch-head) | grep --invert-match HEAD | grep "remotes/origin/" | cut -d "/" -f 3- | xargs -n 1 git push --delete origin
  dmoo = delete-merged-on-origin

